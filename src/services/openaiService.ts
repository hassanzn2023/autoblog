
// OpenAI service for SEO analysis and keyword suggestions

const OPENAI_API_KEY = "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";

interface KeywordSuggestion {
  id: string;
  text: string;
}

export async function generateKeywordSuggestions(
  content: string,
  count: number = 3,
  note?: string
): Promise<KeywordSuggestion[]> {
  try {
    // For demo purposes, we'll return hardcoded results
    // In a production app, this would make an actual API call to OpenAI
    console.log("Generating keyword suggestions for content:", content);
    console.log("User note for regeneration:", note);
    
    // These suggestions would normally come from OpenAI
    const suggestions = [
      { id: '1', text: 'best coffee beans 2024' },
      { id: '2', text: 'top ergonomic chairs' },
      { id: '3', text: 'learn javascript fast' },
      { id: '4', text: 'digital marketing strategies' },
      { id: '5', text: 'home office design' },
      { id: '6', text: 'remote work productivity' },
    ];
    
    // Return a subset of the suggestions
    return suggestions.slice(0, count);
  } catch (error) {
    console.error("Error generating keyword suggestions:", error);
    return [];
  }
}

export async function generateSecondaryKeywordSuggestions(
  primaryKeyword: string,
  content: string,
  count: number = 6,
  note?: string
): Promise<KeywordSuggestion[]> {
  try {
    console.log("Generating secondary keywords for primary keyword:", primaryKeyword);
    console.log("Based on content:", content);
    console.log("User note for regeneration:", note);
    
    // These would normally be generated by OpenAI based on the primary keyword
    const coffeeRelated = [
      { id: '1', text: 'dark roast coffee' },
      { id: '2', text: 'light roast coffee' },
      { id: '3', text: 'coffee grinding tips' },
    ];
    
    const chairRelated = [
      { id: '4', text: 'office chair for back pain' },
      { id: '5', text: 'standing desk benefits' },
      { id: '6', text: 'home office setup ideas' },
    ];
    
    // Return related keywords based on primary keyword
    if (primaryKeyword.includes('coffee')) {
      return coffeeRelated.slice(0, count);
    } else if (primaryKeyword.includes('chair')) {
      return chairRelated.slice(0, count);
    } else {
      // Return a mix if no match
      return [...coffeeRelated, ...chairRelated].slice(0, count);
    }
  } catch (error) {
    console.error("Error generating secondary keyword suggestions:", error);
    return [];
  }
}

export async function analyzeSEOScore(
  content: string,
  primaryKeyword: string,
  secondaryKeywords: string[]
): Promise<{
  score: number;
  recommendations: Array<{
    status: 'success' | 'warning' | 'error';
    text: string;
    action?: string;
  }>;
  stats: {
    words: number;
    headings: number;
    paragraphs: number;
    images: number;
  };
}> {
  // This would normally call OpenAI to analyze the content
  console.log("Analyzing SEO score for content with primary keyword:", primaryKeyword);
  
  // Calculate some basic stats
  const words = content.split(/\s+/).filter(Boolean).length;
  const headings = (content.match(/#/g) || []).length;
  const paragraphs = (content.match(/\n\s*\n/g) || []).length + 1;
  const images = (content.match(/!\[.*?\]\(.*?\)/g) || []).length;
  
  // Return mock analysis
  return {
    score: 85,
    recommendations: [
      { 
        status: 'success', 
        text: `Basic optimization for "${primaryKeyword}" complete.` 
      },
      { 
        status: 'warning', 
        text: "For full control, try Pro Mode." 
      },
      { 
        status: 'error', 
        text: "Add more supporting content to improve ranking.",
        action: "Fix" 
      },
      { 
        status: 'error', 
        text: "Add at least one image to improve engagement.",
        action: "See" 
      }
    ],
    stats: {
      words,
      headings,
      paragraphs,
      images
    }
  };
}
